" Load vim-plug
let s:darwin = has('mac')
set nocompatible
set shell=/bin/bash
set rtp+=/usr/local/etc/vim
if empty(glob("/usr/local/etc/vim/autoload/plug.vim"))
  silent !curl -fLo /usr/local/etc/vim/autoload/plug.vim --create-dirs
	\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

call plug#begin("/usr/local/etc/vim/plugged")
Plug 'morhetz/gruvbox'
Plug 'bling/vim-airline'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'vim-scripts/autoload_cscope.vim'
Plug 'Valloric/YouCompleteMe', {'do' : 'python3 ./install.py  --clang-completer --system-libclang'} | Plug 'rdnetto/YCM-Generator', {'branch': 'stable'}
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'
Plug 'kshenoy/vim-signature'
Plug 'majutsushi/tagbar'
Plug 'terryma/vim-multiple-cursors'
Plug 'derekwyatt/vim-fswitch'
Plug 'dyng/ctrlsf.vim'
Plug 'easymotion/vim-easymotion'
Plug 'godlygeek/tabular'
Plug 'junegunn/fzf', {'do': './install --bin --all'}
Plug 'tpope/vim-surround'
Plug 'ctrlpvim/ctrlp.vim'
Plug 'rdnetto/YCM-Generator', { 'branch': 'develop'}
Plug 'leafgarland/typescript-vim'
call plug#end()	         " required
filetype plugin indent on	 " required

" theme
set t_Co=256
set background=dark
let g:gruvbox_contrast_dark='hard'
if &term =~ '256color'
  " disable Background Color Erase (BCE)
  set t_ut=
  let g:gruvbox_italic=1
endif
colorscheme gruvbox

" Turn on line numbering. Turn it off with set 'nonu'
if s:darwin
	set backspace=indent,eol,start
endif

" Remember last window size
let g:screen_size_restore_pos = 1
if has("gui_running")
  function! ScreenFilename()
    if has('amiga')
      return "s:.vimsize"
    elseif has('win32')
      return $HOME.'\_vimsize'
    else
      return $HOME.'/.vim/.vimsize'
    endif
  endfunction

  function! ScreenRestore()
    " Restore window size (columns and lines) and position
    " from values stored in vimsize file.
    " Must set font first so columns and lines are based on font size.
    let f = ScreenFilename()
    if has("gui_running") && g:screen_size_restore_pos && filereadable(f)
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      for line in readfile(f)
        let sizepos = split(line)
        if len(sizepos) == 5 && sizepos[0] == vim_instance
          silent! execute "set columns=".sizepos[1]." lines=".sizepos[2]
          silent! execute "winpos ".sizepos[3]." ".sizepos[4]
          return
        endif
      endfor
    endif
  endfunction

  function! ScreenSave()
    " Save window size and position.
    if has("gui_running") && g:screen_size_restore_pos
      let vim_instance = (g:screen_size_by_vim_instance==1?(v:servername):'GVIM')
      let data = vim_instance . ' ' . &columns . ' ' . &lines . ' ' .
            \ (getwinposx()<0?0:getwinposx()) . ' ' .
            \ (getwinposy()<0?0:getwinposy())
      let f = ScreenFilename()
      if filereadable(f)
        let lines = readfile(f)
        call filter(lines, "v:val !~ '^" . vim_instance . "\\>'")
        call add(lines, data)
      else
        let lines = [data]
      endif
      call writefile(lines, f)
    endif
  endfunction

  if !exists('g:screen_size_restore_pos')
    let g:screen_size_restore_pos = 1
  endif
  if !exists('g:screen_size_by_vim_instance')
    let g:screen_size_by_vim_instance = 1
  endif
  autocmd VimEnter * if g:screen_size_restore_pos == 1 | call ScreenRestore() | endif
  autocmd VimLeavePre * if g:screen_size_restore_pos == 1 | call ScreenSave() | endif
endif

" Use Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
endif

" gvim font
if s:darwin
	set guifont=Menlo\ for\ Powerline
else
	set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 12
endif

" OmniComplete
set pastetoggle=<F8>
inoremap <F9> <C-x><C-o>

" ctags
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
set tags=./tags;/

" Fswitch
nnoremap <S-Tab> :FSHere<CR>

" CtrlSF
nmap <leader>f <Plug>CtrlSFCwordExec
nnoremap <leader>v <Esc>:CtrlSFToggle<CR>

" airline
set hidden
set laststatus=2
let g:airline_powerline_fonts=1
let g:airline#extensions#branch#enabled = 1
let g:airline#extensions#hunks#enabled = 0
let g:airline#extensions#branch#displayed_head_limit = 10
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_idx_mode = 1
let g:airline#extensions#whitespace#mixed_indent_algo = 1
nnoremap <Tab> :bn<CR>
nnoremap <leader>q :bp <BAR> bd #<CR>
nnoremap <leader>n :enew<CR>
nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9

" YCM
let g:ycm_global_ycm_extra_conf='/usr/local/etc/vim/ycm_extra_conf.py'
nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>
nnoremap <leader>gg :YcmCompleter GoToDefinitionElseDeclaration<CR>
let g:ycm_warning_symbol='>*'
let g:ycm_auto_trigger=1
let g:ycm_min_num_of_chars_for_completion=1
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_semantic_triggers = {'c' : ['re![\D]'], 'cpp' : ['re![\D]']}
let g:ycm_collect_identifiers_from_tags_files=1
let g:ycm_complete_in_comments=1
let g:ycm_confirm_extra_conf=0
let g:ycm_cache_omnifunc=0
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'

" ultisnips
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" Tagbar
let tagbar_left=1
nnoremap <leader>t :TagbarToggle<CR>
let tagbar_width=48
let g:tagbar_compact=1
let g:tagbar_type_cpp = {
    \ 'kinds' : [
        \ 'd:macros:1',
        \ 'g:enums',
        \ 't:typedefs:0:0',
        \ 'e:enumerators:0:0',
        \ 'n:namespaces',
        \ 'c:classes',
        \ 's:structs',
        \ 'u:unions',
        \ 'f:functions',
        \ 'm:members:0:0',
        \ 'v:global:0:0',
        \ 'x:external:0:0',
        \ 'l:local:0:0'
     \ ],
     \ 'sro'        : '::',
     \ 'kind2scope' : {
         \ 'g' : 'enum',
         \ 'n' : 'namespace',
         \ 'c' : 'class',
         \ 's' : 'struct',
         \ 'u' : 'union'
     \ },
     \ 'scope2kind' : {
         \ 'enum'      : 'g',
         \ 'namespace' : 'n',
         \ 'class'     : 'c',
         \ 'struct'    : 's',
         \ 'union'     : 'u'
     \ }
\ }

" cscope
if has("cscope")
    " use both cscope and ctag for 'ctrl-]', ':ta', and 'vim -t'
    set cscopetag

    " check cscope for definition of a symbol before checking ctags: set to 1
    " if you want the reverse search order.
    set csto=0

    " show msg when any other cscope db added
    set cscopeverbose

    "   's'   symbol: find all references to the token under cursor
    nnoremap <C-\>s :cs find s <C-R>=expand("<cword>")<CR><CR>
    "   'g'   global: find global definition(s) of the token under cursor
    nnoremap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
    "   'c'   calls:  find all calls to the function name under cursor
    nnoremap <C-\>c :cs find c <C-R>=expand("<cword>")<CR><CR>
    "   'i'   includes: find files that include the filename under cursor
    nnoremap <C-\>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
    "   'd'   called: find functions that function under cursor calls
    nnoremap <C-\>d :cs find d <C-R>=expand("<cword>")<CR><CR>
endif

" easy motion
let g:EasyMotion_do_mapping = 0
map <leader>s <Plug>(easymotion-s)
map <leader>x <Plug>(easymotion-s2)
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)
let g:EasyMotion_startofline = 0

" TMUX
if exists('$TMUX') && !exists('$NORENAME')
  au BufEnter * if empty(&buftype) | call system('tmux rename-window '.expand('%:t:S')) | endif
  au VimLeave * call system('tmux set-window automatic-rename on')
endif
